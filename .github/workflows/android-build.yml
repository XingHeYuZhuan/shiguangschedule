name: Android CI Build

on:
  workflow_dispatch:
    inputs:
      build_label:
        description: '请选择要构建的发布版本 (Choose Build Variant)'
        required: true
        default: '正式版'
        type: choice
        options:
          - 正式版
          - 开发者版

jobs:
  build:
    environment: Release-Signing

    runs-on: ubuntu-latest

    steps:
      - name: 检出代码 (Checkout)
        uses: actions/checkout@v4

      - name: 清理索引和资源目标目录 (Clean Specific Resource Dirs)
        run: |
          # 强制删除 app/src/main/assets/offline_repo/index 和 schools 的内容
          rm -rf app/src/main/assets/offline_repo/index
          rm -rf app/src/main/assets/offline_repo/schools
          mkdir -p app/src/main/assets/offline_repo/index
          mkdir -p app/src/main/assets/offline_repo/schools

      - name: 克隆索引文件 (Clone Index PB File)
        run: |
          INDEX_PATH="app/src/main/assets/offline_repo/index"
          REPO_URL="https://${{ secrets.GITHUB_TOKEN }}@github.com/XingHeYuZhuan/shiguang_warehouse.git"
          
          echo "--- 正在克隆 index-pb-release 分支并获取 school_index.pb ---"
          
          # 临时目录用于克隆
          TEMP_CLONE_DIR=$(mktemp -d)
          
          # 浅克隆 index-pb-release 分支
          git clone --depth 1 --branch index-pb-release $REPO_URL $TEMP_CLONE_DIR
          
          # 移动文件到目标目录
          if [ -f $TEMP_CLONE_DIR/school_index.pb ]; then
            mv $TEMP_CLONE_DIR/school_index.pb $INDEX_PATH/
            echo "school_index.pb 成功下载到 $INDEX_PATH/"
          else
            echo "错误：未在 index-pb-release 分支中找到 school_index.pb，请检查仓库配置。"
            exit 1
          fi
          
          # 清理临时目录
          rm -rf $TEMP_CLONE_DIR

      - name: 克隆资源文件并清理 adapters.yaml (Clone Resources & Filter YAML)
        run: |
          SCHOOLS_PATH="app/src/main/assets/offline_repo/schools"
          REPO_URL="https://${{ secrets.GITHUB_TOKEN }}@github.com/XingHeYuZhuan/shiguang_warehouse.git"
          
          echo "--- 正在使用 sparse-checkout 克隆 main 分支下的 resources 目录 ---"

          # 临时目录用于稀疏克隆
          TEMP_CLONE_DIR=$(mktemp -d)
          
          # 步骤 1: 初始化和配置稀疏克隆
          git clone --depth 1 --filter=blob:none --no-checkout --branch main $REPO_URL $TEMP_CLONE_DIR
          cd $TEMP_CLONE_DIR
          
          # 设置稀疏检出模式，只拉取 resources 目录
          git sparse-checkout init --cone
          git sparse-checkout set resources
          
          # 步骤 2: 拉取文件
          git checkout main
          
          # 步骤 3: 移动 resources 目录到目标位置 (SCHOOLS_PATH/resources)
          mv resources $SCHOOLS_PATH/
          
          echo "resources 目录成功下载到 $SCHOOLS_PATH/"
          echo "--- 正在清理所有 adapters.yaml 文件 (包括子目录) ---"
          
          # 步骤 4: 清理目标目录下的所有 adapters.yaml 文件
          find $SCHOOLS_PATH/resources -name "adapters.yaml" -exec rm -f {} \;
          
          echo "资源克隆和清理完成。"
          
          # 返回工作目录并清理临时目录
          cd ${{ github.workspace }}
          rm -rf $TEMP_CLONE_DIR

      - name: 运行贡献者数据生成脚本 (Generate Contributors Data)
        run: |
          echo "--- 正在赋予脚本执行权限 ---"
          # 确保脚本路径正确，并赋予执行权限
          chmod +x .github/scripts/build_contributors.sh

          echo "--- 正在执行贡献者数据生成 ---"
          # 运行脚本，它将生成 app/src/main/assets/contributors_data 目录
          .github/scripts/build_contributors.sh    

      - name: 步骤：解析构建标签，确定任务和风味
        id: resolve_vars
        run: |
          LABEL="${{ github.event.inputs.build_label }}"

          case "$LABEL" in
            "正式版")
              TASK="assembleProdRelease"
              FLAVOR="prod"
              ;;
            "开发者版")
              TASK="assembleDevRelease"
              FLAVOR="dev"
              ;;
          esac

          echo "task=$TASK" >> $GITHUB_OUTPUT
          echo "flavor=$FLAVOR" >> $GITHUB_OUTPUT
          echo "已选择：$LABEL，对应 Gradle 任务：$TASK"

      - name: 设置 JDK 21 (Setup JDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: 设置 Gradle 缓存 (Cache Gradle Dependencies)
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 解码并准备签名密钥文件 (Decode and Prepare Signing Key)
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > app/release.jks


      - name: 运行动态构建任务 (Build with Dynamic Flavor)
        run: |
          chmod +x ./gradlew
          ./gradlew ${{ steps.resolve_vars.outputs.task }} \
            -Pandroid.injected.signing.store.file="${{ github.workspace }}/app/release.jks" \
            -Pandroid.injected.signing.store.password="${{ secrets.KEYSTORE_PASSWORD }}" \
            -Pandroid.injected.signing.key.alias="${{ secrets.KEY_ALIAS }}" \
            -Pandroid.injected.signing.key.password="${{ secrets.KEY_PASSWORD }}" \
            --stacktrace


      - name: 上传构建产物到仓库 (Upload Artifact)
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ steps.resolve_vars.outputs.flavor }}-release-apk
          path: app/build/outputs/apk/${{ steps.resolve_vars.outputs.flavor }}/release/*.apk
          retention-days: 7