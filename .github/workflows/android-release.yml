name: Android Production Release (Manual)

# 只能手动触发
on:
  workflow_dispatch:
    inputs:
      build_run_id:
        description: '请填写 Build CI 成功的 Run ID (例如：123456789)'
        required: true
        type: string
      build_flavor:
        description: '请选择要发布的版本风味'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
          - dev
      version_name:
        description: '请输入要发布的软件版本号 (例如: 1.0.0)'
        required: true
        type: string

jobs:
  release:
    name: 审批并发布到 GitHub Releases
    runs-on: ubuntu-latest

    environment: Production-Release

    permissions:
      contents: write

    steps:
      - name: 检出代码 (Checkout)
        uses: actions/checkout@v4

      - name: 查找、下载指定的 Artifact ZIP 文件
        uses: actions/github-script@v7
        id: download_artifact
        with:
          script: |
            const { build_run_id, build_flavor, version_name } = context.payload.inputs;
            const artifactName = `app-${build_flavor}-release-apk`;
            const zipFileName = `${artifactName}.zip`; 
            
            core.info(`准备发布版本：${version_name}，风味：${build_flavor}，基于 Run ID：${build_run_id}`);
            
            // 1. 查找目标 run_id 中的 Artifact 列表
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: build_run_id,
            });
            // 2. 过滤出正确的 Artifact
            const matchArtifact = artifacts.data.artifacts.filter(artifact => {
              return artifact.name === artifactName
            })[0];
            
            if (!matchArtifact) {
              core.setFailed(`在 Run ID ${build_run_id} 中未找到 Artifact: ${artifactName}！请检查 Run ID 和风味是否正确。`);
              return;
            }

            // 3. 下载 Artifact 的二进制数据
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });
            
            // 4. 将二进制数据写入到文件系统
            const fs = require('fs');
            fs.writeFileSync(zipFileName, Buffer.from(download.data)); 
            
            // 5. 设置输出变量：ZIP 文件名、风味 和 版本号
            core.setOutput('zip_file', zipFileName);
            core.setOutput('flavor', build_flavor);
            core.setOutput('version', version_name);

      # 2. 解压 Artifact
      - name: 解压 Artifact 并设置所有 APK 路径
        id: unzip_and_set_path
        run: |
          ARTIFACT_ZIP_FILE=${{ steps.download_artifact.outputs.zip_file }}          
          
          echo "开始解压文件：$ARTIFACT_ZIP_FILE"
          mkdir -p artifacts/
          # 使用系统自带的 unzip 命令解压
          unzip -o $ARTIFACT_ZIP_FILE -d ./artifacts/
          
          # 设置通配符路径，以包含所有解压出来的 APK 文件
          ALL_APKS_PATH='./artifacts/*.apk'
          
          echo "设置文件上传路径（通配符）：$ALL_APKS_PATH"
          
          # 使用 GITHUB_OUTPUT 设置 artifact_path 变量，供下一个步骤的 files 参数使用
          echo "artifact_path=$ALL_APKS_PATH" >> $GITHUB_OUTPUT

      # 3. 创建 GitHub Release
      - name: 创建/更新 GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # 标签名称：v版本号-风味 (例如: v1.0.0-prod)
          tag_name: v${{ steps.download_artifact.outputs.version }}-${{ steps.download_artifact.outputs.flavor }}
          # 发布标题：Android Release v版本号 (风味) (例如: Android Release v1.0.0 (prod))
          name: Android Release v${{ steps.download_artifact.outputs.version }} (${{ steps.download_artifact.outputs.flavor }})
          # 如果是 prod，则立即发布；如果是 dev，则设置为预发布草稿
          draft: ${{ steps.download_artifact.outputs.flavor != 'prod' }}
          prerelease: ${{ steps.download_artifact.outputs.flavor == 'dev' }}
          # 引用解压步骤的输出，files 参数将自动匹配所有 *.apk 文件并上传
          files: ${{ steps.unzip_and_set_path.outputs.artifact_path }}